package gitprocessor

import (
	"log"
	"net/http"

	"github.com/dghubble/sling"
)

// Used to define Github Params that should be send to the github api when searching repositories
type gitQueryParams struct {
	Sort    string `url:"sort,omitempty"`
	Query   string `url:"q"`
	PerPage int    `url:"per_page,omitempty"`
}

// GitRepository is the api represenation a github repository
// This is a subpart of the json response generated by the search API
type GitRepository struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Language string `json:"language"`
}

// gitQuery is the main structure used by the github search api.
// Not all field returned are present in this structure !
type gitQueryResponse struct {
	TotalCount int             `json:"total_count"`
	Items      []GitRepository `json:"items"`
}

// An hepler function used to construct the client needed to make HTTP request to the github API.
func getSling(path string) *sling.Sling {
	gitBase := sling.New().Base("https://api.github.com/").Client(&http.Client{})
	return gitBase.Get(path)
}

// GetGithubRepositories will get 100 repositories corresponding to the query string sorted by last update date.
func GetGithubRepositories(query string) []GitRepository {
	params := &gitQueryParams{
		Sort:    "updated",
		Query:   query,
		PerPage: 100,
	}
	response := new(gitQueryResponse)
	_, err := getSling("search/repositories").QueryStruct(params).ReceiveSuccess(response)
	if err != nil {
		log.Fatal(err.Error())
	}

	return response.Items
}
